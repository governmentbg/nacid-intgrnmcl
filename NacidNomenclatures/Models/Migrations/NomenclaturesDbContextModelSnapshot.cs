// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Models.Migrations
{
    [DbContext(typeof(NomenclaturesDbContext))]
    partial class NomenclaturesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Models.Models.Nomenclatures.Country.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("country");
                });

            modelBuilder.Entity("Models.Models.Nomenclatures.Country.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Code2")
                        .HasColumnType("text")
                        .HasColumnName("code2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("MainSettlementCode")
                        .HasColumnType("text")
                        .HasColumnName("mainsettlementcode");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<string>("SecondLevelRegionCode")
                        .HasColumnType("text")
                        .HasColumnName("secondlevelregioncode");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("district");
                });

            modelBuilder.Entity("Models.Models.Nomenclatures.Country.Municipality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Code2")
                        .HasColumnType("text")
                        .HasColumnName("code2");

                    b.Property<int>("DistrictId")
                        .HasColumnType("integer")
                        .HasColumnName("districtid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("MainSettlementCode")
                        .HasColumnType("text")
                        .HasColumnName("mainsettlementcode");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("municipality");
                });

            modelBuilder.Entity("Models.Models.Nomenclatures.Country.Settlement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("Altitude")
                        .HasColumnType("text")
                        .HasColumnName("altitude");

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("DistrictCode")
                        .HasColumnType("text")
                        .HasColumnName("districtcode");

                    b.Property<string>("DistrictCode2")
                        .HasColumnType("text")
                        .HasColumnName("districtcode2");

                    b.Property<int>("DistrictId")
                        .HasColumnType("integer")
                        .HasColumnName("districtid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDistrict")
                        .HasColumnType("boolean")
                        .HasColumnName("isdistrict");

                    b.Property<string>("MayoraltyCode")
                        .HasColumnType("text")
                        .HasColumnName("mayoraltycode");

                    b.Property<string>("MunicipalityCode")
                        .HasColumnType("text")
                        .HasColumnName("municipalitycode");

                    b.Property<string>("MunicipalityCode2")
                        .HasColumnType("text")
                        .HasColumnName("municipalitycode2");

                    b.Property<int>("MunicipalityId")
                        .HasColumnType("integer")
                        .HasColumnName("municipalityid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<string>("SettlementName")
                        .HasColumnType("text")
                        .HasColumnName("settlementname");

                    b.Property<string>("TypeCode")
                        .HasColumnType("text")
                        .HasColumnName("typecode");

                    b.Property<string>("TypeName")
                        .HasColumnType("text")
                        .HasColumnName("typename");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("MunicipalityId");

                    b.ToTable("settlement");
                });

            modelBuilder.Entity("Models.Models.Nomenclatures.Institution.Institution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("integer")
                        .HasColumnName("districtid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool>("IsResearchUniversity")
                        .HasColumnType("boolean")
                        .HasColumnName("isresearchuniversity");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<int>("LotNumber")
                        .HasColumnType("integer")
                        .HasColumnName("lotnumber");

                    b.Property<int?>("MunicipalityId")
                        .HasColumnType("integer")
                        .HasColumnName("municipalityid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int?>("OrganizationType")
                        .HasColumnType("integer")
                        .HasColumnName("organizationtype");

                    b.Property<int?>("OwnershipType")
                        .HasColumnType("integer")
                        .HasColumnName("ownershiptype");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parentid");

                    b.Property<int>("RootId")
                        .HasColumnType("integer")
                        .HasColumnName("rootid");

                    b.Property<int?>("SettlementId")
                        .HasColumnType("integer")
                        .HasColumnName("settlementid");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("shortname");

                    b.Property<string>("ShortNameAlt")
                        .HasColumnType("text")
                        .HasColumnName("shortnamealt");

                    b.Property<int?>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<string>("Uic")
                        .HasColumnType("text")
                        .HasColumnName("uic");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("ParentId");

                    b.HasIndex("RootId");

                    b.HasIndex("SettlementId");

                    b.ToTable("institution");
                });

            modelBuilder.Entity("Models.Models.Nomenclatures.Country.Municipality", b =>
                {
                    b.HasOne("Models.Models.Nomenclatures.Country.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("Models.Models.Nomenclatures.Country.Settlement", b =>
                {
                    b.HasOne("Models.Models.Nomenclatures.Country.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Models.Nomenclatures.Country.Municipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Municipality");
                });

            modelBuilder.Entity("Models.Models.Nomenclatures.Institution.Institution", b =>
                {
                    b.HasOne("Models.Models.Nomenclatures.Country.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("Models.Models.Nomenclatures.Country.Municipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityId");

                    b.HasOne("Models.Models.Nomenclatures.Institution.Institution", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("Models.Models.Nomenclatures.Institution.Institution", "Root")
                        .WithMany()
                        .HasForeignKey("RootId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Models.Nomenclatures.Country.Settlement", "Settlement")
                        .WithMany()
                        .HasForeignKey("SettlementId");

                    b.Navigation("District");

                    b.Navigation("Municipality");

                    b.Navigation("Parent");

                    b.Navigation("Root");

                    b.Navigation("Settlement");
                });
#pragma warning restore 612, 618
        }
    }
}
